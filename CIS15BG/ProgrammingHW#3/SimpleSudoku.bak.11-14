/*
Programmer's Name: Evan Chen
Progam Name: SimpleSudoku.c
Date: 11/03/12
OS: Macintosh OSX 10.7.5
Description: This program reads a file that contains answers to a
multiple choice test,student IDs and their answers to the test.
The program corrects each student's test and then prints the
student ID and their test score. Following this, the program also
prints how many students answered each test question correctly.
*/
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

#define MAX_DIM 16
#define MAX_CHARS 101

//Prototype Declaration
/*1*/ FILE* openFile(char*,char*);
/*2*/ void assignArray(int puzzleArray[][MAX_DIM]);
/*3*/ int readArray(FILE*,int puzzleArray[][MAX_DIM]);
/*4*/ void playPuzzle(int puzzleArray[][MAX_DIM],int);
/*4a*/ void displayArray(int puzzleArray[][MAX_DIM], int);
/*5*/ bool userNum(int puzzleArray[][MAX_DIM],int);
/*5a*/ bool checkSolved(int puzzleArray[][MAX_DIM],int);
/*6*/ int validUsInput(int puzzleArray[][MAX_DIM],char,int,int,int);
void rewind( FILE *stream );


int main()
{
    int puzzleArray[MAX_DIM][MAX_DIM];
    FILE*sudoku;
    int size;

    while((sudoku = openFile("Enter a filename (enter QUIT to end program): ", "r")) != NULL){
    assignArray(puzzleArray);
    size = readArray(sudoku,puzzleArray);
    playPuzzle(puzzleArray,size);
    sudoku = openFile("Enter a filename (enter QUIT to end program): ", "r");
    }
    return 0;
}

/*1*/ FILE* openFile(char*prompt,char*mode)
{
    FILE*fp;
    char filename[MAX_CHARS]="";

    fputs(prompt,stdout);
    gets(filename);
    if (strcmp(filename, "QUIT") == 0)
        return NULL;
    fp = fopen(filename, mode);
    return fp;
}

/*2*/ void assignArray(int puzzleArray[][MAX_DIM])
{
    int i;
    int j;

    for(i=0;i<MAX_DIM;i++){
        for(j=0;j<MAX_DIM;j++){
            puzzleArray[i][j] = -1;
            //printf("%d",puzzleArray[i][j]);
        }
    }
}

/*3*/ int readArray(FILE*input,int puzzleArray[][MAX_DIM])
{
    int i;
    int j;
    int size;
    int inputStr;
    char length[MAX_DIM];


    fgets(length,MAX_CHARS,input);
    size = strlen(length)/2;
    rewind(input);
    for(i=0;i<size;i++){
        for(j=0;j<size;j++){
            fscanf(input,"%d",&puzzleArray[i][j]);
            //printf("%d",puzzleArray[i][j]);
        }
    }
    return size;
}

/*4*/ void playPuzzle(int puzzleArray[][MAX_DIM],int size)
{
    char solve = false;
    char play = true;
    while(solve == false && play == true){
    displayArray(puzzleArray,size);
    play = userNum(puzzleArray,size);
    if(play == true)
    {
        solve = checkSolved(puzzleArray,size);
    }
    }

}

/*4a*/ void displayArray(int puzzleArray[][MAX_DIM], int size)
{
    int i;
    int j;
    int colNum=1;
    char space[1]={'\0'};
    char rowLet[]={'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','\0'};

    printf("\n ");
    for(i=0;i<size;i++){
        printf("%4.1d",colNum);
        colNum++;
    }
    printf("\n  ");
    for(i=0;i<size;i++){
        printf("----");
    }
    printf("\n");
    for(i=0;i<size;i++){
        printf("%c", rowLet[i]);
        for(j=0;j<size;j++){
            if(puzzleArray[i][j]!=0)
                printf("%4.1d",puzzleArray[i][j]);
            if(puzzleArray[i][j]==0)
                printf("%4.1s",space);
        }
        printf("\n");
    }
    printf("\n");

}

/*5*/ bool userNum(int puzzleArray[][MAX_DIM],int size)
{
    char playPuzzle[MAX_CHARS];
    char userRowLet;
    int userColNum;
    int userValue;
    int code;
    int comp;
    int i=0;
    char rowLet[]={'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','\0'};

    while((strcasecmp(playPuzzle,"n")!=0)){
        printf("Would you like to place a number in the puzzle? (N or n for no): ");
        gets(playPuzzle);
        printf("Enter a row letter & column number: ");
        scanf("%c%d", &userRowLet, &userColNum);
        printf("Enter int value to place (1 to %d): ",size);
        scanf("%d",&userValue);
        code = validUsInput(puzzleArray,userRowLet,userColNum,userValue,size);
        if(code== -1){ //Invalid Row
        printf("Invalid Row Letter, would you like to try again? (N or n for no): ");
        gets(playPuzzle);
        }
        if(code==(-2)){ //Invalid Column
        printf("Invalid Column Number, would you like to try again? (N or n for no): ");
        gets(playPuzzle);
        }
        if(code==(-3)){ //Value already exists in row/column
        printf("Value already exists in respective Row/Column, would you like to try again? (N or n for no): ");
        gets(playPuzzle);
        }
        if(code==(-4)){ //Value is out of range (not within the usable numbers)
        printf("Value does not exist in specified range, would you like to try again? (N or n for no): ");
        gets(playPuzzle);
        }
        if(code==0){
            while(userRowLet!=rowLet[i]){
                i++;
            }
            puzzleArray[i][userColNum-1] = userValue;
            return true;
        }
        fflush(stdin);
    }
    return false;
}

/*5a*/ bool checkSolved(int puzzleArray[][MAX_DIM],int size)
{
    int i;
    int j;

    for(i=0;i<size;i++){
        for(j<0;j<size;j++){
        if(puzzleArray[j][i]==0)
        return false;
        }
    }
    return true;
}

/*6*/ int validUsInput(int puzzleArray[][MAX_DIM],char userRowLet,int userColNum,int value, int size)
{
    int index=0;
    int i;
    int j;
    int k;
    char rowLet[]={'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','\0'};

    while(userRowLet!=rowLet[index]){
        ++index;
    }
    if(index>=size)
    return (-1);
    if((userColNum>size)|| (userColNum<0))
    return (-2);
    for(j=0;j<size;j++){
        if(value==puzzleArray[index][j])
        return (-3);
        }
    for(k=0;k<size;k++){
        if(value==puzzleArray[k][userColNum-1])
        return (-3);
    }
    if((value>size)||(value<=0))
    return (-4);
    else
    return 0;
}




